#include <stdio.h>
#include <stdbool.h>

#define NUM_PROCESSES 4
#define NUM_RESOURCES 3

int claim[NUM_PROCESSES][NUM_RESOURCES] = {{3, 2, 2}, {6, 1, 3}, {3, 1, 4}, {4, 2, 2}};
int allocation[NUM_PROCESSES][NUM_RESOURCES] = {{1, 0, 0}, {6, 1, 2}, {2, 1, 1}, {0, 0, 2}};
int resources[NUM_RESOURCES] = {9, 3, 6};
bool finished[NUM_PROCESSES];

bool isSafe() {
  for (int i = 0; i < NUM_PROCESSES; i++) finished[i] = false;

  int work[NUM_RESOURCES];
  for (int i = 0; i < NUM_RESOURCES; i++) work[i] = resources[i];

  int count = 0;
  while (count < NUM_PROCESSES) {
    bool found = false;
    for (int i = 0; i < NUM_PROCESSES; i++) {
      if (!finished[i]) {
        int j;
        for (j = 0; j < NUM_RESOURCES; j++)
          if (claim[i][j] - allocation[i][j] > work[j]) break;

        if (j == NUM_RESOURCES) {
          for (int k = 0; k < NUM_RESOURCES; k++)
            work[k] += allocation[i][k];
          count++;
          finished[i] = true;
          found = true;
        }
      }
    }
    if (!found) return false;
  }

  return true;
}

int main() {
  if (isSafe())
    printf("The system is in a safe state.\n");
  else
    printf("The system is in an unsafe state.\n");

  return 0;
}
